// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: postman.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostmanClient is the client API for Postman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostmanClient interface {
	SendNewspaper(ctx context.Context, in *Newspaper, opts ...grpc.CallOption) (*RespNewspaper, error)
}

type postmanClient struct {
	cc grpc.ClientConnInterface
}

func NewPostmanClient(cc grpc.ClientConnInterface) PostmanClient {
	return &postmanClient{cc}
}

func (c *postmanClient) SendNewspaper(ctx context.Context, in *Newspaper, opts ...grpc.CallOption) (*RespNewspaper, error) {
	out := new(RespNewspaper)
	err := c.cc.Invoke(ctx, "/Postman/SendNewspaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostmanServer is the server API for Postman service.
// All implementations must embed UnimplementedPostmanServer
// for forward compatibility
type PostmanServer interface {
	SendNewspaper(context.Context, *Newspaper) (*RespNewspaper, error)
	mustEmbedUnimplementedPostmanServer()
}

// UnimplementedPostmanServer must be embedded to have forward compatible implementations.
type UnimplementedPostmanServer struct {
}

func (UnimplementedPostmanServer) SendNewspaper(context.Context, *Newspaper) (*RespNewspaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewspaper not implemented")
}
func (UnimplementedPostmanServer) mustEmbedUnimplementedPostmanServer() {}

// UnsafePostmanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostmanServer will
// result in compilation errors.
type UnsafePostmanServer interface {
	mustEmbedUnimplementedPostmanServer()
}

func RegisterPostmanServer(s grpc.ServiceRegistrar, srv PostmanServer) {
	s.RegisterService(&Postman_ServiceDesc, srv)
}

func _Postman_SendNewspaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Newspaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostmanServer).SendNewspaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Postman/SendNewspaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostmanServer).SendNewspaper(ctx, req.(*Newspaper))
	}
	return interceptor(ctx, in, info, handler)
}

// Postman_ServiceDesc is the grpc.ServiceDesc for Postman service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Postman_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Postman",
	HandlerType: (*PostmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNewspaper",
			Handler:    _Postman_SendNewspaper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postman.proto",
}
